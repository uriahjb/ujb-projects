#!/usr/bin/env python

"""
  IOMachine provides a class framework for a generic input output system, meant to be a superclass
  for state-machine and other generic classes. Its IO is linked to other IOMachine objects.

  The purpose of this is to develop a process/thread independent 'Input/Ouput Machine' for 
  purpose of generic and ... hopefully ... cool, multi-actor/entity interfacing. It would be nice
  to be able to do some sweet dynamic simulations or something.

  The above is representative of the desire for this system, and probably not really indicative 
  of its capabilities

  The top-level class is the IOMachine, it holds a dictionary of those IOMachine objects 
  which it sends to, and ... maybe holds a record of the IOMachine objects that have 
  sent it data. 
  
  All Input and Output structures are given a timestamp <--- of some sort
"""

class IOMachine( object ):
  
